/*
NetHSM

All endpoints expect exactly the specified JSON. Additional properties will cause a Bad Request Error (400). All HTTP errors contain a JSON structure with an explanation of type string. All [base64](https://tools.ietf.org/html/rfc4648#section-4) encoded values are Big Endian. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the AkPub type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AkPub{}

// AkPub struct for AkPub
type AkPub struct {
	P256 *string `json:"P256,omitempty"`
	P384 *string `json:"P384,omitempty"`
}

// NewAkPub instantiates a new AkPub object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAkPub() *AkPub {
	this := AkPub{}
	return &this
}

// NewAkPubWithDefaults instantiates a new AkPub object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAkPubWithDefaults() *AkPub {
	this := AkPub{}
	return &this
}

// GetP256 returns the P256 field value if set, zero value otherwise.
func (o *AkPub) GetP256() string {
	if o == nil || IsNil(o.P256) {
		var ret string
		return ret
	}
	return *o.P256
}

// GetP256Ok returns a tuple with the P256 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AkPub) GetP256Ok() (*string, bool) {
	if o == nil || IsNil(o.P256) {
		return nil, false
	}
	return o.P256, true
}

// HasP256 returns a boolean if a field has been set.
func (o *AkPub) HasP256() bool {
	if o != nil && !IsNil(o.P256) {
		return true
	}

	return false
}

// SetP256 gets a reference to the given string and assigns it to the P256 field.
func (o *AkPub) SetP256(v string) {
	o.P256 = &v
}

// GetP384 returns the P384 field value if set, zero value otherwise.
func (o *AkPub) GetP384() string {
	if o == nil || IsNil(o.P384) {
		var ret string
		return ret
	}
	return *o.P384
}

// GetP384Ok returns a tuple with the P384 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AkPub) GetP384Ok() (*string, bool) {
	if o == nil || IsNil(o.P384) {
		return nil, false
	}
	return o.P384, true
}

// HasP384 returns a boolean if a field has been set.
func (o *AkPub) HasP384() bool {
	if o != nil && !IsNil(o.P384) {
		return true
	}

	return false
}

// SetP384 gets a reference to the given string and assigns it to the P384 field.
func (o *AkPub) SetP384(v string) {
	o.P384 = &v
}

func (o AkPub) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AkPub) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.P256) {
		toSerialize["P256"] = o.P256
	}
	if !IsNil(o.P384) {
		toSerialize["P384"] = o.P384
	}
	return toSerialize, nil
}

type NullableAkPub struct {
	value *AkPub
	isSet bool
}

func (v NullableAkPub) Get() *AkPub {
	return v.value
}

func (v *NullableAkPub) Set(val *AkPub) {
	v.value = val
	v.isSet = true
}

func (v NullableAkPub) IsSet() bool {
	return v.isSet
}

func (v *NullableAkPub) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAkPub(val *AkPub) *NullableAkPub {
	return &NullableAkPub{value: val, isSet: true}
}

func (v NullableAkPub) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAkPub) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


