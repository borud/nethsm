/*
NetHSM

All endpoints expect exactly the specified JSON. Additional properties will cause a Bad Request Error (400). All HTTP errors contain a JSON structure with an explanation of type string. All [base64](https://tools.ietf.org/html/rfc4648#section-4) encoded values are Big Endian. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ProvisionRequestData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProvisionRequestData{}

// ProvisionRequestData struct for ProvisionRequestData
type ProvisionRequestData struct {
	UnlockPassphrase string `json:"unlockPassphrase"`
	AdminPassphrase string `json:"adminPassphrase"`
	SystemTime time.Time `json:"systemTime"`
}

type _ProvisionRequestData ProvisionRequestData

// NewProvisionRequestData instantiates a new ProvisionRequestData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProvisionRequestData(unlockPassphrase string, adminPassphrase string, systemTime time.Time) *ProvisionRequestData {
	this := ProvisionRequestData{}
	this.UnlockPassphrase = unlockPassphrase
	this.AdminPassphrase = adminPassphrase
	this.SystemTime = systemTime
	return &this
}

// NewProvisionRequestDataWithDefaults instantiates a new ProvisionRequestData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProvisionRequestDataWithDefaults() *ProvisionRequestData {
	this := ProvisionRequestData{}
	return &this
}

// GetUnlockPassphrase returns the UnlockPassphrase field value
func (o *ProvisionRequestData) GetUnlockPassphrase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UnlockPassphrase
}

// GetUnlockPassphraseOk returns a tuple with the UnlockPassphrase field value
// and a boolean to check if the value has been set.
func (o *ProvisionRequestData) GetUnlockPassphraseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnlockPassphrase, true
}

// SetUnlockPassphrase sets field value
func (o *ProvisionRequestData) SetUnlockPassphrase(v string) {
	o.UnlockPassphrase = v
}

// GetAdminPassphrase returns the AdminPassphrase field value
func (o *ProvisionRequestData) GetAdminPassphrase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AdminPassphrase
}

// GetAdminPassphraseOk returns a tuple with the AdminPassphrase field value
// and a boolean to check if the value has been set.
func (o *ProvisionRequestData) GetAdminPassphraseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdminPassphrase, true
}

// SetAdminPassphrase sets field value
func (o *ProvisionRequestData) SetAdminPassphrase(v string) {
	o.AdminPassphrase = v
}

// GetSystemTime returns the SystemTime field value
func (o *ProvisionRequestData) GetSystemTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.SystemTime
}

// GetSystemTimeOk returns a tuple with the SystemTime field value
// and a boolean to check if the value has been set.
func (o *ProvisionRequestData) GetSystemTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SystemTime, true
}

// SetSystemTime sets field value
func (o *ProvisionRequestData) SetSystemTime(v time.Time) {
	o.SystemTime = v
}

func (o ProvisionRequestData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProvisionRequestData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["unlockPassphrase"] = o.UnlockPassphrase
	toSerialize["adminPassphrase"] = o.AdminPassphrase
	toSerialize["systemTime"] = o.SystemTime
	return toSerialize, nil
}

func (o *ProvisionRequestData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"unlockPassphrase",
		"adminPassphrase",
		"systemTime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProvisionRequestData := _ProvisionRequestData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProvisionRequestData)

	if err != nil {
		return err
	}

	*o = ProvisionRequestData(varProvisionRequestData)

	return err
}

type NullableProvisionRequestData struct {
	value *ProvisionRequestData
	isSet bool
}

func (v NullableProvisionRequestData) Get() *ProvisionRequestData {
	return v.value
}

func (v *NullableProvisionRequestData) Set(val *ProvisionRequestData) {
	v.value = val
	v.isSet = true
}

func (v NullableProvisionRequestData) IsSet() bool {
	return v.isSet
}

func (v *NullableProvisionRequestData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvisionRequestData(val *ProvisionRequestData) *NullableProvisionRequestData {
	return &NullableProvisionRequestData{value: val, isSet: true}
}

func (v NullableProvisionRequestData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvisionRequestData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


