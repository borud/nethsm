/*
NetHSM

All endpoints expect exactly the specified JSON. Additional properties will cause a Bad Request Error (400). All HTTP errors contain a JSON structure with an explanation of type string. All [base64](https://tools.ietf.org/html/rfc4648#section-4) encoded values are Big Endian. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// DecryptMode the model 'DecryptMode'
type DecryptMode string

// List of DecryptMode
const (
	DECRYPTMODE_RAW DecryptMode = "RAW"
	DECRYPTMODE_PKCS1 DecryptMode = "PKCS1"
	DECRYPTMODE_OAEP_MD5 DecryptMode = "OAEP_MD5"
	DECRYPTMODE_OAEP_SHA1 DecryptMode = "OAEP_SHA1"
	DECRYPTMODE_OAEP_SHA224 DecryptMode = "OAEP_SHA224"
	DECRYPTMODE_OAEP_SHA256 DecryptMode = "OAEP_SHA256"
	DECRYPTMODE_OAEP_SHA384 DecryptMode = "OAEP_SHA384"
	DECRYPTMODE_OAEP_SHA512 DecryptMode = "OAEP_SHA512"
	DECRYPTMODE_AES_CBC DecryptMode = "AES_CBC"
)

// All allowed values of DecryptMode enum
var AllowedDecryptModeEnumValues = []DecryptMode{
	"RAW",
	"PKCS1",
	"OAEP_MD5",
	"OAEP_SHA1",
	"OAEP_SHA224",
	"OAEP_SHA256",
	"OAEP_SHA384",
	"OAEP_SHA512",
	"AES_CBC",
}

func (v *DecryptMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DecryptMode(value)
	for _, existing := range AllowedDecryptModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DecryptMode", value)
}

// NewDecryptModeFromValue returns a pointer to a valid DecryptMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDecryptModeFromValue(v string) (*DecryptMode, error) {
	ev := DecryptMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DecryptMode: valid values are %v", v, AllowedDecryptModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DecryptMode) IsValid() bool {
	for _, existing := range AllowedDecryptModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DecryptMode value
func (v DecryptMode) Ptr() *DecryptMode {
	return &v
}

type NullableDecryptMode struct {
	value *DecryptMode
	isSet bool
}

func (v NullableDecryptMode) Get() *DecryptMode {
	return v.value
}

func (v *NullableDecryptMode) Set(val *DecryptMode) {
	v.value = val
	v.isSet = true
}

func (v NullableDecryptMode) IsSet() bool {
	return v.isSet
}

func (v *NullableDecryptMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDecryptMode(val *DecryptMode) *NullableDecryptMode {
	return &NullableDecryptMode{value: val, isSet: true}
}

func (v NullableDecryptMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDecryptMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

