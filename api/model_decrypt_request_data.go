/*
NetHSM

All endpoints expect exactly the specified JSON. Additional properties will cause a Bad Request Error (400). All HTTP errors contain a JSON structure with an explanation of type string. All [base64](https://tools.ietf.org/html/rfc4648#section-4) encoded values are Big Endian. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DecryptRequestData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DecryptRequestData{}

// DecryptRequestData struct for DecryptRequestData
type DecryptRequestData struct {
	Mode DecryptMode `json:"mode"`
	Encrypted string `json:"encrypted" validate:"regexp=^[a-zA-Z0-9+\\/]+={0,3}$"`
	Iv *string `json:"iv,omitempty" validate:"regexp=^[a-zA-Z0-9+\\/]+={0,3}$"`
}

type _DecryptRequestData DecryptRequestData

// NewDecryptRequestData instantiates a new DecryptRequestData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDecryptRequestData(mode DecryptMode, encrypted string) *DecryptRequestData {
	this := DecryptRequestData{}
	this.Mode = mode
	this.Encrypted = encrypted
	return &this
}

// NewDecryptRequestDataWithDefaults instantiates a new DecryptRequestData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDecryptRequestDataWithDefaults() *DecryptRequestData {
	this := DecryptRequestData{}
	return &this
}

// GetMode returns the Mode field value
func (o *DecryptRequestData) GetMode() DecryptMode {
	if o == nil {
		var ret DecryptMode
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *DecryptRequestData) GetModeOk() (*DecryptMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *DecryptRequestData) SetMode(v DecryptMode) {
	o.Mode = v
}

// GetEncrypted returns the Encrypted field value
func (o *DecryptRequestData) GetEncrypted() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Encrypted
}

// GetEncryptedOk returns a tuple with the Encrypted field value
// and a boolean to check if the value has been set.
func (o *DecryptRequestData) GetEncryptedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Encrypted, true
}

// SetEncrypted sets field value
func (o *DecryptRequestData) SetEncrypted(v string) {
	o.Encrypted = v
}

// GetIv returns the Iv field value if set, zero value otherwise.
func (o *DecryptRequestData) GetIv() string {
	if o == nil || IsNil(o.Iv) {
		var ret string
		return ret
	}
	return *o.Iv
}

// GetIvOk returns a tuple with the Iv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptRequestData) GetIvOk() (*string, bool) {
	if o == nil || IsNil(o.Iv) {
		return nil, false
	}
	return o.Iv, true
}

// HasIv returns a boolean if a field has been set.
func (o *DecryptRequestData) HasIv() bool {
	if o != nil && !IsNil(o.Iv) {
		return true
	}

	return false
}

// SetIv gets a reference to the given string and assigns it to the Iv field.
func (o *DecryptRequestData) SetIv(v string) {
	o.Iv = &v
}

func (o DecryptRequestData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DecryptRequestData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mode"] = o.Mode
	toSerialize["encrypted"] = o.Encrypted
	if !IsNil(o.Iv) {
		toSerialize["iv"] = o.Iv
	}
	return toSerialize, nil
}

func (o *DecryptRequestData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mode",
		"encrypted",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDecryptRequestData := _DecryptRequestData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDecryptRequestData)

	if err != nil {
		return err
	}

	*o = DecryptRequestData(varDecryptRequestData)

	return err
}

type NullableDecryptRequestData struct {
	value *DecryptRequestData
	isSet bool
}

func (v NullableDecryptRequestData) Get() *DecryptRequestData {
	return v.value
}

func (v *NullableDecryptRequestData) Set(val *DecryptRequestData) {
	v.value = val
	v.isSet = true
}

func (v NullableDecryptRequestData) IsSet() bool {
	return v.isSet
}

func (v *NullableDecryptRequestData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDecryptRequestData(val *DecryptRequestData) *NullableDecryptRequestData {
	return &NullableDecryptRequestData{value: val, isSet: true}
}

func (v NullableDecryptRequestData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDecryptRequestData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


