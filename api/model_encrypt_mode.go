/*
NetHSM

All endpoints expect exactly the specified JSON. Additional properties will cause a Bad Request Error (400). All HTTP errors contain a JSON structure with an explanation of type string. All [base64](https://tools.ietf.org/html/rfc4648#section-4) encoded values are Big Endian. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// EncryptMode the model 'EncryptMode'
type EncryptMode string

// List of EncryptMode
const (
	ENCRYPTMODE_AES_CBC EncryptMode = "AES_CBC"
)

// All allowed values of EncryptMode enum
var AllowedEncryptModeEnumValues = []EncryptMode{
	"AES_CBC",
}

func (v *EncryptMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EncryptMode(value)
	for _, existing := range AllowedEncryptModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EncryptMode", value)
}

// NewEncryptModeFromValue returns a pointer to a valid EncryptMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEncryptModeFromValue(v string) (*EncryptMode, error) {
	ev := EncryptMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EncryptMode: valid values are %v", v, AllowedEncryptModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EncryptMode) IsValid() bool {
	for _, existing := range AllowedEncryptModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EncryptMode value
func (v EncryptMode) Ptr() *EncryptMode {
	return &v
}

type NullableEncryptMode struct {
	value *EncryptMode
	isSet bool
}

func (v NullableEncryptMode) Get() *EncryptMode {
	return v.value
}

func (v *NullableEncryptMode) Set(val *EncryptMode) {
	v.value = val
	v.isSet = true
}

func (v NullableEncryptMode) IsSet() bool {
	return v.isSet
}

func (v *NullableEncryptMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncryptMode(val *EncryptMode) *NullableEncryptMode {
	return &NullableEncryptMode{value: val, isSet: true}
}

func (v NullableEncryptMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncryptMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

