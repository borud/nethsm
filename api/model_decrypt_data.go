/*
NetHSM

All endpoints expect exactly the specified JSON. Additional properties will cause a Bad Request Error (400). All HTTP errors contain a JSON structure with an explanation of type string. All [base64](https://tools.ietf.org/html/rfc4648#section-4) encoded values are Big Endian. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DecryptData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DecryptData{}

// DecryptData struct for DecryptData
type DecryptData struct {
	Decrypted string `json:"decrypted" validate:"regexp=^[a-zA-Z0-9+\\/]+={0,3}$"`
}

type _DecryptData DecryptData

// NewDecryptData instantiates a new DecryptData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDecryptData(decrypted string) *DecryptData {
	this := DecryptData{}
	this.Decrypted = decrypted
	return &this
}

// NewDecryptDataWithDefaults instantiates a new DecryptData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDecryptDataWithDefaults() *DecryptData {
	this := DecryptData{}
	return &this
}

// GetDecrypted returns the Decrypted field value
func (o *DecryptData) GetDecrypted() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Decrypted
}

// GetDecryptedOk returns a tuple with the Decrypted field value
// and a boolean to check if the value has been set.
func (o *DecryptData) GetDecryptedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Decrypted, true
}

// SetDecrypted sets field value
func (o *DecryptData) SetDecrypted(v string) {
	o.Decrypted = v
}

func (o DecryptData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DecryptData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["decrypted"] = o.Decrypted
	return toSerialize, nil
}

func (o *DecryptData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"decrypted",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDecryptData := _DecryptData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDecryptData)

	if err != nil {
		return err
	}

	*o = DecryptData(varDecryptData)

	return err
}

type NullableDecryptData struct {
	value *DecryptData
	isSet bool
}

func (v NullableDecryptData) Get() *DecryptData {
	return v.value
}

func (v *NullableDecryptData) Set(val *DecryptData) {
	v.value = val
	v.isSet = true
}

func (v NullableDecryptData) IsSet() bool {
	return v.isSet
}

func (v *NullableDecryptData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDecryptData(val *DecryptData) *NullableDecryptData {
	return &NullableDecryptData{value: val, isSet: true}
}

func (v NullableDecryptData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDecryptData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


