/*
NetHSM

All endpoints expect exactly the specified JSON. Additional properties will cause a Bad Request Error (400). All HTTP errors contain a JSON structure with an explanation of type string. All [base64](https://tools.ietf.org/html/rfc4648#section-4) encoded values are Big Endian. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EncryptRequestData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EncryptRequestData{}

// EncryptRequestData struct for EncryptRequestData
type EncryptRequestData struct {
	Mode EncryptMode `json:"mode"`
	Message string `json:"message" validate:"regexp=^[a-zA-Z0-9+\\/]+={0,3}$"`
	Iv *string `json:"iv,omitempty" validate:"regexp=^[a-zA-Z0-9+\\/]+={0,3}$"`
}

type _EncryptRequestData EncryptRequestData

// NewEncryptRequestData instantiates a new EncryptRequestData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEncryptRequestData(mode EncryptMode, message string) *EncryptRequestData {
	this := EncryptRequestData{}
	this.Mode = mode
	this.Message = message
	return &this
}

// NewEncryptRequestDataWithDefaults instantiates a new EncryptRequestData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEncryptRequestDataWithDefaults() *EncryptRequestData {
	this := EncryptRequestData{}
	return &this
}

// GetMode returns the Mode field value
func (o *EncryptRequestData) GetMode() EncryptMode {
	if o == nil {
		var ret EncryptMode
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *EncryptRequestData) GetModeOk() (*EncryptMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *EncryptRequestData) SetMode(v EncryptMode) {
	o.Mode = v
}

// GetMessage returns the Message field value
func (o *EncryptRequestData) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *EncryptRequestData) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *EncryptRequestData) SetMessage(v string) {
	o.Message = v
}

// GetIv returns the Iv field value if set, zero value otherwise.
func (o *EncryptRequestData) GetIv() string {
	if o == nil || IsNil(o.Iv) {
		var ret string
		return ret
	}
	return *o.Iv
}

// GetIvOk returns a tuple with the Iv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EncryptRequestData) GetIvOk() (*string, bool) {
	if o == nil || IsNil(o.Iv) {
		return nil, false
	}
	return o.Iv, true
}

// HasIv returns a boolean if a field has been set.
func (o *EncryptRequestData) HasIv() bool {
	if o != nil && !IsNil(o.Iv) {
		return true
	}

	return false
}

// SetIv gets a reference to the given string and assigns it to the Iv field.
func (o *EncryptRequestData) SetIv(v string) {
	o.Iv = &v
}

func (o EncryptRequestData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EncryptRequestData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mode"] = o.Mode
	toSerialize["message"] = o.Message
	if !IsNil(o.Iv) {
		toSerialize["iv"] = o.Iv
	}
	return toSerialize, nil
}

func (o *EncryptRequestData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mode",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEncryptRequestData := _EncryptRequestData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEncryptRequestData)

	if err != nil {
		return err
	}

	*o = EncryptRequestData(varEncryptRequestData)

	return err
}

type NullableEncryptRequestData struct {
	value *EncryptRequestData
	isSet bool
}

func (v NullableEncryptRequestData) Get() *EncryptRequestData {
	return v.value
}

func (v *NullableEncryptRequestData) Set(val *EncryptRequestData) {
	v.value = val
	v.isSet = true
}

func (v NullableEncryptRequestData) IsSet() bool {
	return v.isSet
}

func (v *NullableEncryptRequestData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncryptRequestData(val *EncryptRequestData) *NullableEncryptRequestData {
	return &NullableEncryptRequestData{value: val, isSet: true}
}

func (v NullableEncryptRequestData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncryptRequestData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


