/*
NetHSM

All endpoints expect exactly the specified JSON. Additional properties will cause a Bad Request Error (400). All HTTP errors contain a JSON structure with an explanation of type string. All [base64](https://tools.ietf.org/html/rfc4648#section-4) encoded values are Big Endian. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// KeyMechanism the model 'KeyMechanism'
type KeyMechanism string

// List of KeyMechanism
const (
	KEYMECHANISM_RSA_DECRYPTION_RAW KeyMechanism = "RSA_Decryption_RAW"
	KEYMECHANISM_RSA_DECRYPTION_PKCS1 KeyMechanism = "RSA_Decryption_PKCS1"
	KEYMECHANISM_RSA_DECRYPTION_OAEP_MD5 KeyMechanism = "RSA_Decryption_OAEP_MD5"
	KEYMECHANISM_RSA_DECRYPTION_OAEP_SHA1 KeyMechanism = "RSA_Decryption_OAEP_SHA1"
	KEYMECHANISM_RSA_DECRYPTION_OAEP_SHA224 KeyMechanism = "RSA_Decryption_OAEP_SHA224"
	KEYMECHANISM_RSA_DECRYPTION_OAEP_SHA256 KeyMechanism = "RSA_Decryption_OAEP_SHA256"
	KEYMECHANISM_RSA_DECRYPTION_OAEP_SHA384 KeyMechanism = "RSA_Decryption_OAEP_SHA384"
	KEYMECHANISM_RSA_DECRYPTION_OAEP_SHA512 KeyMechanism = "RSA_Decryption_OAEP_SHA512"
	KEYMECHANISM_RSA_SIGNATURE_PKCS1 KeyMechanism = "RSA_Signature_PKCS1"
	KEYMECHANISM_RSA_SIGNATURE_PSS_MD5 KeyMechanism = "RSA_Signature_PSS_MD5"
	KEYMECHANISM_RSA_SIGNATURE_PSS_SHA1 KeyMechanism = "RSA_Signature_PSS_SHA1"
	KEYMECHANISM_RSA_SIGNATURE_PSS_SHA224 KeyMechanism = "RSA_Signature_PSS_SHA224"
	KEYMECHANISM_RSA_SIGNATURE_PSS_SHA256 KeyMechanism = "RSA_Signature_PSS_SHA256"
	KEYMECHANISM_RSA_SIGNATURE_PSS_SHA384 KeyMechanism = "RSA_Signature_PSS_SHA384"
	KEYMECHANISM_RSA_SIGNATURE_PSS_SHA512 KeyMechanism = "RSA_Signature_PSS_SHA512"
	KEYMECHANISM_ED_DSA_SIGNATURE KeyMechanism = "EdDSA_Signature"
	KEYMECHANISM_ECDSA_SIGNATURE KeyMechanism = "ECDSA_Signature"
	KEYMECHANISM_BIP340_SIGNATURE KeyMechanism = "BIP340_Signature"
	KEYMECHANISM_AES_ENCRYPTION_CBC KeyMechanism = "AES_Encryption_CBC"
	KEYMECHANISM_AES_DECRYPTION_CBC KeyMechanism = "AES_Decryption_CBC"
)

// All allowed values of KeyMechanism enum
var AllowedKeyMechanismEnumValues = []KeyMechanism{
	"RSA_Decryption_RAW",
	"RSA_Decryption_PKCS1",
	"RSA_Decryption_OAEP_MD5",
	"RSA_Decryption_OAEP_SHA1",
	"RSA_Decryption_OAEP_SHA224",
	"RSA_Decryption_OAEP_SHA256",
	"RSA_Decryption_OAEP_SHA384",
	"RSA_Decryption_OAEP_SHA512",
	"RSA_Signature_PKCS1",
	"RSA_Signature_PSS_MD5",
	"RSA_Signature_PSS_SHA1",
	"RSA_Signature_PSS_SHA224",
	"RSA_Signature_PSS_SHA256",
	"RSA_Signature_PSS_SHA384",
	"RSA_Signature_PSS_SHA512",
	"EdDSA_Signature",
	"ECDSA_Signature",
	"BIP340_Signature",
	"AES_Encryption_CBC",
	"AES_Decryption_CBC",
}

func (v *KeyMechanism) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KeyMechanism(value)
	for _, existing := range AllowedKeyMechanismEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid KeyMechanism", value)
}

// NewKeyMechanismFromValue returns a pointer to a valid KeyMechanism
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKeyMechanismFromValue(v string) (*KeyMechanism, error) {
	ev := KeyMechanism(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KeyMechanism: valid values are %v", v, AllowedKeyMechanismEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KeyMechanism) IsValid() bool {
	for _, existing := range AllowedKeyMechanismEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to KeyMechanism value
func (v KeyMechanism) Ptr() *KeyMechanism {
	return &v
}

type NullableKeyMechanism struct {
	value *KeyMechanism
	isSet bool
}

func (v NullableKeyMechanism) Get() *KeyMechanism {
	return v.value
}

func (v *NullableKeyMechanism) Set(val *KeyMechanism) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyMechanism) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyMechanism) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyMechanism(val *KeyMechanism) *NullableKeyMechanism {
	return &NullableKeyMechanism{value: val, isSet: true}
}

func (v NullableKeyMechanism) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyMechanism) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

