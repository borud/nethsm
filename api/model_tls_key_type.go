/*
NetHSM

All endpoints expect exactly the specified JSON. Additional properties will cause a Bad Request Error (400). All HTTP errors contain a JSON structure with an explanation of type string. All [base64](https://tools.ietf.org/html/rfc4648#section-4) encoded values are Big Endian. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// TlsKeyType the model 'TlsKeyType'
type TlsKeyType string

// List of TlsKeyType
const (
	TLSKEYTYPE_RSA TlsKeyType = "RSA"
	TLSKEYTYPE_CURVE25519 TlsKeyType = "Curve25519"
	TLSKEYTYPE_EC_P256 TlsKeyType = "EC_P256"
	TLSKEYTYPE_EC_P384 TlsKeyType = "EC_P384"
	TLSKEYTYPE_EC_P521 TlsKeyType = "EC_P521"
	TLSKEYTYPE_BRAINPOOL_P256 TlsKeyType = "BrainpoolP256"
	TLSKEYTYPE_BRAINPOOL_P384 TlsKeyType = "BrainpoolP384"
	TLSKEYTYPE_BRAINPOOL_P512 TlsKeyType = "BrainpoolP512"
)

// All allowed values of TlsKeyType enum
var AllowedTlsKeyTypeEnumValues = []TlsKeyType{
	"RSA",
	"Curve25519",
	"EC_P256",
	"EC_P384",
	"EC_P521",
	"BrainpoolP256",
	"BrainpoolP384",
	"BrainpoolP512",
}

func (v *TlsKeyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TlsKeyType(value)
	for _, existing := range AllowedTlsKeyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TlsKeyType", value)
}

// NewTlsKeyTypeFromValue returns a pointer to a valid TlsKeyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTlsKeyTypeFromValue(v string) (*TlsKeyType, error) {
	ev := TlsKeyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TlsKeyType: valid values are %v", v, AllowedTlsKeyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TlsKeyType) IsValid() bool {
	for _, existing := range AllowedTlsKeyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TlsKeyType value
func (v TlsKeyType) Ptr() *TlsKeyType {
	return &v
}

type NullableTlsKeyType struct {
	value *TlsKeyType
	isSet bool
}

func (v NullableTlsKeyType) Get() *TlsKeyType {
	return v.value
}

func (v *NullableTlsKeyType) Set(val *TlsKeyType) {
	v.value = val
	v.isSet = true
}

func (v NullableTlsKeyType) IsSet() bool {
	return v.isSet
}

func (v *NullableTlsKeyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTlsKeyType(val *TlsKeyType) *NullableTlsKeyType {
	return &NullableTlsKeyType{value: val, isSet: true}
}

func (v NullableTlsKeyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTlsKeyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

