/*
NetHSM

All endpoints expect exactly the specified JSON. Additional properties will cause a Bad Request Error (400). All HTTP errors contain a JSON structure with an explanation of type string. All [base64](https://tools.ietf.org/html/rfc4648#section-4) encoded values are Big Endian. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserPostData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserPostData{}

// UserPostData struct for UserPostData
type UserPostData struct {
	RealName string `json:"realName"`
	Role UserRole `json:"role"`
	Passphrase string `json:"passphrase"`
}

type _UserPostData UserPostData

// NewUserPostData instantiates a new UserPostData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPostData(realName string, role UserRole, passphrase string) *UserPostData {
	this := UserPostData{}
	this.RealName = realName
	this.Role = role
	this.Passphrase = passphrase
	return &this
}

// NewUserPostDataWithDefaults instantiates a new UserPostData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPostDataWithDefaults() *UserPostData {
	this := UserPostData{}
	return &this
}

// GetRealName returns the RealName field value
func (o *UserPostData) GetRealName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RealName
}

// GetRealNameOk returns a tuple with the RealName field value
// and a boolean to check if the value has been set.
func (o *UserPostData) GetRealNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RealName, true
}

// SetRealName sets field value
func (o *UserPostData) SetRealName(v string) {
	o.RealName = v
}

// GetRole returns the Role field value
func (o *UserPostData) GetRole() UserRole {
	if o == nil {
		var ret UserRole
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *UserPostData) GetRoleOk() (*UserRole, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *UserPostData) SetRole(v UserRole) {
	o.Role = v
}

// GetPassphrase returns the Passphrase field value
func (o *UserPostData) GetPassphrase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Passphrase
}

// GetPassphraseOk returns a tuple with the Passphrase field value
// and a boolean to check if the value has been set.
func (o *UserPostData) GetPassphraseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Passphrase, true
}

// SetPassphrase sets field value
func (o *UserPostData) SetPassphrase(v string) {
	o.Passphrase = v
}

func (o UserPostData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserPostData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["realName"] = o.RealName
	toSerialize["role"] = o.Role
	toSerialize["passphrase"] = o.Passphrase
	return toSerialize, nil
}

func (o *UserPostData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"realName",
		"role",
		"passphrase",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserPostData := _UserPostData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserPostData)

	if err != nil {
		return err
	}

	*o = UserPostData(varUserPostData)

	return err
}

type NullableUserPostData struct {
	value *UserPostData
	isSet bool
}

func (v NullableUserPostData) Get() *UserPostData {
	return v.value
}

func (v *NullableUserPostData) Set(val *UserPostData) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPostData) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPostData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPostData(val *UserPostData) *NullableUserPostData {
	return &NullableUserPostData{value: val, isSet: true}
}

func (v NullableUserPostData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPostData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


