/*
NetHSM

All endpoints expect exactly the specified JSON. Additional properties will cause a Bad Request Error (400). All HTTP errors contain a JSON structure with an explanation of type string. All [base64](https://tools.ietf.org/html/rfc4648#section-4) encoded values are Big Endian. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RandomData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RandomData{}

// RandomData struct for RandomData
type RandomData struct {
	Random string `json:"random" validate:"regexp=^[a-zA-Z0-9+\\/]+={0,3}$"`
}

type _RandomData RandomData

// NewRandomData instantiates a new RandomData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRandomData(random string) *RandomData {
	this := RandomData{}
	this.Random = random
	return &this
}

// NewRandomDataWithDefaults instantiates a new RandomData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRandomDataWithDefaults() *RandomData {
	this := RandomData{}
	return &this
}

// GetRandom returns the Random field value
func (o *RandomData) GetRandom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Random
}

// GetRandomOk returns a tuple with the Random field value
// and a boolean to check if the value has been set.
func (o *RandomData) GetRandomOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Random, true
}

// SetRandom sets field value
func (o *RandomData) SetRandom(v string) {
	o.Random = v
}

func (o RandomData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RandomData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["random"] = o.Random
	return toSerialize, nil
}

func (o *RandomData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"random",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRandomData := _RandomData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRandomData)

	if err != nil {
		return err
	}

	*o = RandomData(varRandomData)

	return err
}

type NullableRandomData struct {
	value *RandomData
	isSet bool
}

func (v NullableRandomData) Get() *RandomData {
	return v.value
}

func (v *NullableRandomData) Set(val *RandomData) {
	v.value = val
	v.isSet = true
}

func (v NullableRandomData) IsSet() bool {
	return v.isSet
}

func (v *NullableRandomData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRandomData(val *RandomData) *NullableRandomData {
	return &NullableRandomData{value: val, isSet: true}
}

func (v NullableRandomData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRandomData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


